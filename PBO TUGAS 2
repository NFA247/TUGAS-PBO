abstract class Manusia {
    protected double tinggiBadan;

    public Manusia(double tinggiBadan) {
        this.tinggiBadan = tinggiBadan;
    }

    public abstract double hitungBeratBadanIdeal();
}

class Pria extends Manusia {
    public Pria(double tinggiBadan) {
        super(tinggiBadan);
    }


    //penggunaan operator pengurangan dan perkalian//
    public double hitungBeratBadanIdeal() {
        return (tinggiBadan - 100) * 0.9;
    }
}

class Wanita extends Manusia {
    public Wanita(double tinggiBadan) {
        super(tinggiBadan);
    }

   //penggunaan operator pengurangan dan perkalian//
    public double hitungBeratBadanIdeal() {
        return (tinggiBadan - 110) * 0.9;
    }
}

//penambahan inheritance//
class Anak extends Manusia {
    public Anak(double tinggiBadan) {
        super(tinggiBadan);
    }

    public double hitungBeratBadanIdeal(){
        return (tinggiBadan - 120) * 0.9;
    }
}

public class Main {
    public static void main(String[] args) {
        Pria pria = new Pria(182);
        Wanita wanita = new Wanita(165);
        Anak  Anak = new Anak( 135);

        System.out.println("Berat badan ideal pria: " + pria.hitungBeratBadanIdeal());
        System.out.println("Berat badan ideal wanita: " + wanita.hitungBeratBadanIdeal());
        System.out.println("Berat badan ideal Anak : " + Anak.hitungBeratBadanIdeal());

        //Informasi tentang garbage collector
        Runtime rt = Runtime.getRuntime();
        System.out.println("Jumlah total memory: " + rt.totalMemory());
        System.out.println("Jumlah memory yang tersedia: " + rt.freeMemory());
        System.out.println("Jumlah memory yang telah digunakan: " + (rt.totalMemory() - rt.freeMemory()));
    }
}
